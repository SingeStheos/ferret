name: Android APK Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      ACTIONS_STEP_DEBUG: true  # Enable debug logging

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential python3-pip git zip libffi-dev libssl-dev wget unzip openjdk-8-jdk

    - name: Install Android SDK Command-Line Tools
      run: |
        mkdir -p $HOME/Android/Sdk/cmdline-tools

        # Download and extract SDK tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O android-sdk-tools.zip
        unzip android-sdk-tools.zip -d $HOME/Android/Sdk/cmdline-tools/

        # Rename extracted directory to 'latest'
        mv $HOME/Android/Sdk/cmdline-tools/cmdline-tools $HOME/Android/Sdk/cmdline-tools/latest

        # Set environment variables
        echo "ANDROID_HOME=$HOME/Android/Sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/Android/Sdk" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/Android/Sdk/cmdline-tools/latest/bin:$HOME/Android/Sdk/platform-tools" >> $GITHUB_ENV

        # Check for cached licenses
        - name: Cache Android SDK licenses
          uses: actions/cache@v3
          with:
            path: ${{ runner.temp }}/android-licenses
            key: ${{ runner.os }}-android-licenses-${{ hashFiles('Android/Sdk/cmdline-tools/latest/licenses/*.txt') }}
            restore-keys: |
              ${{ runner.os }}-android-licenses-

        # Accept licenses (if not cached)
        run: |
          if [ ! -d ${{ runner.temp }}/android-licenses ]; then
            (sleep 60; echo y) | $HOME/Android/Sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true
            mv $HOME/Android/Sdk/cmdline-tools/latest/licenses ${{ runner.temp }}/android-licenses
          fi

        continue-on-error: true  # Allow build to continue even if licenses aren't accepted (first run)

        # Install SDK components
        $HOME/Android/Sdk/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "build-tools;33.0.2" \
          "platforms;android-30" \
          (if [ -d ${{ runner.temp }}/android-licenses ]; then echo ""; else echo "--licenses"; fi)

    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install buildozer cython

    - name: Ensure buildozer.spec exists
      run: |
        if [ ! -f buildozer.spec ]; then
          echo "No buildozer.spec found. Please generate it with 'buildozer init'."
          exit 1
        fi

    - name: Build APK
      run: |
        buildozer android debug
        ls bin/

    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: MyApp-debug.apk
        path: bin/*.apk
